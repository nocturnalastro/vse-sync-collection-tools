// SPDX-License-Identifier: GPL-2.0-or-later

// Code generated by MockGen. DO NOT EDIT.
// Source: /home/micosta/go/pkg/mod/k8s.io/client-go@v0.26.1/tools/remotecommand/remotecommand.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	httpstream "k8s.io/apimachinery/pkg/util/httpstream"
	remotecommand "k8s.io/client-go/tools/remotecommand"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Stream mocks base method.
func (m *MockExecutor) Stream(options remotecommand.StreamOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockExecutorMockRecorder) Stream(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockExecutor)(nil).Stream), options)
}

// StreamWithContext mocks base method.
func (m *MockExecutor) StreamWithContext(ctx context.Context, options remotecommand.StreamOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamWithContext", ctx, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamWithContext indicates an expected call of StreamWithContext.
func (mr *MockExecutorMockRecorder) StreamWithContext(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamWithContext", reflect.TypeOf((*MockExecutor)(nil).StreamWithContext), ctx, options)
}

// MockstreamCreator is a mock of streamCreator interface.
type MockstreamCreator struct {
	ctrl     *gomock.Controller
	recorder *MockstreamCreatorMockRecorder
}

// MockstreamCreatorMockRecorder is the mock recorder for MockstreamCreator.
type MockstreamCreatorMockRecorder struct {
	mock *MockstreamCreator
}

// NewMockstreamCreator creates a new mock instance.
func NewMockstreamCreator(ctrl *gomock.Controller) *MockstreamCreator {
	mock := &MockstreamCreator{ctrl: ctrl}
	mock.recorder = &MockstreamCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstreamCreator) EXPECT() *MockstreamCreatorMockRecorder {
	return m.recorder
}

// CreateStream mocks base method.
func (m *MockstreamCreator) CreateStream(headers http.Header) (httpstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", headers)
	ret0, _ := ret[0].(httpstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockstreamCreatorMockRecorder) CreateStream(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockstreamCreator)(nil).CreateStream), headers)
}

// MockstreamProtocolHandler is a mock of streamProtocolHandler interface.
type MockstreamProtocolHandler struct {
	ctrl     *gomock.Controller
	recorder *MockstreamProtocolHandlerMockRecorder
}

// MockstreamProtocolHandlerMockRecorder is the mock recorder for MockstreamProtocolHandler.
type MockstreamProtocolHandlerMockRecorder struct {
	mock *MockstreamProtocolHandler
}

// NewMockstreamProtocolHandler creates a new mock instance.
func NewMockstreamProtocolHandler(ctrl *gomock.Controller) *MockstreamProtocolHandler {
	mock := &MockstreamProtocolHandler{ctrl: ctrl}
	mock.recorder = &MockstreamProtocolHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstreamProtocolHandler) EXPECT() *MockstreamProtocolHandlerMockRecorder {
	return m.recorder
}
